-- Tạo bảng comments
create table public.comments (
  id bigint generated by default as identity primary key,
  post_id bigint references posts(id) on delete cascade,
  content text not null,
  author_uid uuid references auth.users(id) on delete cascade,
  author_display_name text,
  author_email text,
  author_avatar_url text,
  created_at timestamp with time zone default now(),
  likes integer default 0
);

-- Tạo bảng comment_likes
create table public.comment_likes (
  id bigint generated by default as identity primary key,
  comment_id bigint references comments(id) on delete cascade,
  user_id uuid references auth.users(id) on delete cascade,
  created_at timestamp with time zone default now(),
  unique(comment_id, user_id)
);

-- Tạo indexes cho performance
create index comments_post_id_idx on comments(post_id);
create index comments_author_uid_idx on comments(author_uid);
create index comment_likes_comment_id_idx on comment_likes(comment_id);
create index comment_likes_user_id_idx on comment_likes(user_id);

-- Enable Row Level Security
alter table comments enable row level security;
alter table comment_likes enable row level security;

-- RLS Policies cho comments
create policy "Users can view all comments" on comments
  for select using (true);

create policy "Users can insert their own comments" on comments
  for insert with check (auth.uid() = author_uid);

create policy "Users can update their own comments" on comments
  for update using (auth.uid() = author_uid);

create policy "Users can delete their own comments" on comments
  for delete using (auth.uid() = author_uid);

-- RLS Policies cho comment_likes
create policy "Users can view all comment likes" on comment_likes
  for select using (true);

create policy "Users can insert their own comment likes" on comment_likes
  for insert with check (auth.uid() = user_id);

create policy "Users can delete their own comment likes" on comment_likes
  for delete using (auth.uid() = user_id); 